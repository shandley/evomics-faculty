name: Link Checker

on:
  schedule:
    - cron: '0 4 * * 0' # Weekly Sunday 4AM UTC
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [main]
    paths:
      - 'src/data/**'

jobs:
  link-checker:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check external links
        run: node scripts/checkLinks.cjs
        
      - name: Generate link report
        run: node scripts/generateLinkReport.cjs
        
      - name: Upload link report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: link-report-${{ github.run_number }}
          path: reports/link-report.json
          retention-days: 30
          
      - name: Create GitHub issue for broken links
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('reports/link-report.json', 'utf8'));
              const brokenLinks = report.links.filter(link => link.status === 'broken');
              
              if (brokenLinks.length === 0) return;
              
              let issueBody = `## ðŸ”— Broken Links Report\n\n`;
              issueBody += `Found ${brokenLinks.length} broken links that need attention:\n\n`;
              
              brokenLinks.forEach(link => {
                issueBody += `### ${link.type}: ${link.facultyName || 'Unknown'}\n`;
                issueBody += `- **URL**: ${link.url}\n`;
                issueBody += `- **Status**: ${link.statusCode || 'Unknown'}\n`;
                issueBody += `- **Error**: ${link.error || 'Link not accessible'}\n`;
                issueBody += `- **Faculty ID**: ${link.facultyId}\n\n`;
              });
              
              issueBody += `## ðŸ“Š Summary\n`;
              issueBody += `- Total links checked: ${report.summary.totalLinks}\n`;
              issueBody += `- Working links: ${report.summary.workingLinks}\n`;
              issueBody += `- Warning links: ${report.summary.warningLinks || 0}\n`;
              issueBody += `- Broken links: ${report.summary.brokenLinks}\n`;
              issueBody += `- Overall success rate: ${report.summary.successRate}%\n`;
              issueBody += `- Strict success rate: ${report.summary.strictSuccessRate || report.summary.successRate}%\n\n`;
              
              issueBody += `*Generated automatically by Link Checker workflow*`;
              
              // Check if there's already an open issue
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'broken-links,automated'
              });
              
              if (existingIssues.data.length > 0) {
                // Update existing issue
                await github.rest.issues.createComment({
                  issue_number: existingIssues.data[0].number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## ðŸ”„ Updated Link Check Results\n\n${issueBody}`
                });
              } else {
                // Create new issue
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `ðŸ”— Broken Links Found - ${new Date().toISOString().split('T')[0]}`,
                  body: issueBody,
                  labels: ['broken-links', 'automated', 'maintenance']
                });
              }
            } catch (error) {
              console.error('Error creating issue:', error);
            }
            
      - name: Check live site availability
        run: |
          echo "Checking live site availability..."
          curl -f -s -o /dev/null https://shandley.github.io/evomics-faculty/ || exit 1
          echo "âœ… Live site is accessible"
          
      - name: Summary
        if: always()
        run: |
          echo "Link checker completed"
          if [ -f "reports/link-report.json" ]; then
            node -e "
              const report = require('./reports/link-report.json');
              console.log('ðŸ“Š Link Check Summary:');
              console.log('Total links checked:', report.summary.totalLinks);
              console.log('Working links:', report.summary.workingLinks);
              console.log('Broken links:', report.summary.brokenLinks);
              console.log('Success rate:', report.summary.successRate + '%');
            "
          fi